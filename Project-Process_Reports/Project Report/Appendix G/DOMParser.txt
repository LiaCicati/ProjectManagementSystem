    using DOM parser to read from .xml files (could not get the tasks to initialize properly)
    private Project getSingleProject(String fileName)
        throws ParserConfigurationException, IOException, SAXException,
        TransformerConfigurationException
    {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(fileName);
        Transformer transformer = TransformerFactory.newInstance()
            .newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "no");

        NodeList subNodes = doc.getElementsByTagName("Project").item(0)
            .getChildNodes();

        String nodeName = "";
        String nodeContent = "";
        String projectTitle = "";
        String projectDescription = "";
        int customerID = 0;
        MyDate projectDeadline = null;
        TeamMemberList teamMemberList = null;
        RequirementList requirementList = null;
        TaskList taskList = null;

        //runs through all subNodes in a .xml file
        for (int i = 0; i < subNodes.getLength(); i++)
        {
            Node child = subNodes.item(i);
            nodeName = child.getNodeName();//nodeName is the names we look for in the .xml file
            nodeContent = child.getTextContent();//nodeContent is the data we want to extract from t.xml files

            switch (nodeName)
            {
                case "customerID":
                    customerID = Integer.parseInt(nodeContent);
                    break;
                case "description":
                    projectDescription = nodeContent;
                    break;
                case "title":
                    projectTitle = nodeContent;
                    break;
                case "deadline":
                    NodeList deadlineSubNodes = child.getChildNodes();
                    int deadlineDay = 0,
                        deadlineMonth = 0,
                        deadlineYear = 0;
                    for (int j = 0; j < deadlineSubNodes.getLength(); j++)//new loop to run though all subNodes since deadline is from diff class
                    {
                        //have to set new nodeName and nodeContent when going into another subNode
                        nodeContent = deadlineSubNodes.item(j).getTextContent();
                        nodeName = deadlineSubNodes.item(j).getNodeName();
                        switch (nodeName)
                        {
                            case "day":
                                deadlineDay = Integer.parseInt(nodeContent);
                                break;
                            case "month":
                                deadlineMonth = Integer.parseInt(nodeContent);
                                break;
                            case "year":
                                deadlineYear = Integer.parseInt(nodeContent);
                                break;
                        }
                    }//TODO add validation!
                    projectDeadline = new MyDate(deadlineDay, deadlineMonth,
                        deadlineYear);
                    break;
                case "teamMemberList":
                    NodeList teamMembersSubNodes = child.getChildNodes();
                    teamMemberList = new TeamMemberList();
                    Name teamMemberName = null;
                    int teamMemberID = 0;
                    String teamMemberRole = "";
                    for (int j = 0; j < teamMembersSubNodes.getLength(); j++)//new loop to run though next set of subNodes
                    {
                        Node teamMemberNode = teamMembersSubNodes.item(j);
                        if (!teamMemberNode.getNodeName().equals("teamMembers"))//breaks without this because of subNode hierarchy
                            continue;

                        for (int k = 0; k < teamMemberNode.getChildNodes()//new loop to run though next set of subNodes
                            .getLength(); k++)
                        {
                            Node teamMemberDataNode = teamMemberNode
                                .getChildNodes().item(k);
                            nodeContent = teamMemberDataNode.getTextContent();
                            nodeName = teamMemberDataNode.getNodeName();

                            switch (nodeName)
                            {
                                case "name":
                                    NodeList nameSubNodes = teamMemberDataNode
                                        .getChildNodes();
                                    String firstName = "";
                                    String lastName = "";
                                    for (int l = 0;
                                         l < nameSubNodes.getLength(); l++)//new loop to run though next set of subNodes
                                    {
                                        Node nameNode = nameSubNodes.item(l);
                                        nodeContent = nameNode.getTextContent();
                                        nodeName = nameNode.getNodeName();
                                        switch (nodeName)
                                        {
                                            case "firstName":
                                                firstName = nodeContent;
                                                break;
                                            case "lastName":
                                                lastName = nodeContent;
                                                break;
                                        }
                                    }//TODO add validation!
                                    teamMemberName = new Name(firstName,
                                        lastName);
                                    break;
                                case "id":
                                    teamMemberID = Integer
                                        .parseInt(nodeContent);
                                    break;
                                case "role":
                                    teamMemberRole = nodeContent;
                                    break;
                            }
                        }//TODO ask about team member types!
                        teamMemberList.addTeamMember(
                            new TeamMember(teamMemberName, teamMemberID));
                        teamMemberList.getTeamMemberById(teamMemberID).changeRole(teamMemberRole);
                    }
                    break;
                    //TODO implement cases for the remaining subNodes!
                case "requirementList":
                    NodeList requirementsSubNodes = child.getChildNodes();
                    requirementList = new RequirementList();
                    double estimatedTime = 0;
                    TeamMember responsibleTeamMember = null;
                    double timeSpent = 0;
                    String userStory = "";
                    String requirementStatus = "";
                    int requirementID = 0;
                    Type type = null;
                    MyDate requirementDeadline = null;
                    Requirement temp = null;

                    for (int j = 0; j < requirementsSubNodes.getLength(); j++)
                    {
                        Node requirementNode = requirementsSubNodes.item(j);
                        if (!requirementNode.getNodeName().equals("requirements"))//breaks without this because of subNode hierarchy
                            continue;

                        for (int k = 0; k < requirementNode.getChildNodes()
                            .getLength(); k++)
                        {
                            Node requirementDataNode = requirementNode
                                .getChildNodes().item(k);
                            nodeContent = requirementDataNode.getTextContent();
                            nodeName = requirementDataNode.getNodeName();

                            switch (nodeName)
                            {
                                case "estimatedTime":
                                    estimatedTime = Double.parseDouble(nodeContent);
                                    break;
                                case "timeSpent":
                                    timeSpent = Double.parseDouble(nodeContent);
                                    break;
                                case "userStory":
                                    userStory = nodeContent;
                                    break;
                                case "ID":
                                    requirementID = Integer.parseInt(nodeContent);
                                    break;
                                case "type":
                                    type = Type.valueOf(nodeContent);
                                    break;
                                case "status":
                                    requirementStatus = nodeContent;
                                    break;
                                case "responsibleTeamMember":
                                    NodeList teamMemberSubNodes = requirementDataNode.getChildNodes();
                                    String role = "";
                                    int ID = 0;
                                    Name name = null;

                                    for (int l = 0; l < teamMemberSubNodes.getLength(); l++)
                                    {
                                        Node teamMemberNode = teamMemberSubNodes.item(l);
                                        nodeContent = teamMemberNode.getTextContent();
                                        nodeName = teamMemberNode.getNodeName();
                                        switch (nodeName)
                                        {
                                            case "role":
                                                role = nodeContent;
                                                break;
                                            case "id":
                                                ID = Integer.parseInt(nodeContent);
                                                break;
                                            case "name":
                                                NodeList nameSubNodes = teamMemberNode.getChildNodes();
                                                String responsibleFirstName = "";
                                                String responsibleLastName = "";
                                                for (int m = 0; m < nameSubNodes.getLength(); m++)
                                                {
                                                    Node nameNode = nameSubNodes.item(m);
                                                    nodeContent = nameNode.getTextContent();
                                                    nodeName = nameNode.getNodeName();
                                                    switch (nodeName)
                                                    {
                                                        case "firstName":
                                                            responsibleFirstName = nodeContent;
                                                            break;
                                                        case "lastName":
                                                            responsibleLastName = nodeContent;
                                                            break;
                                                    }
                                                }
                                                name = new Name(responsibleFirstName, responsibleLastName);
                                                break;
                                        }
                                    }
                                    responsibleTeamMember = new TeamMember(name, ID);
                                    responsibleTeamMember.changeRole(role);
                                    break;
                                case "deadline":
                                    NodeList requirementDeadlineSubNodes = requirementDataNode.getChildNodes();
                                    int requirementDeadlineDay = 0,
                                        requirementDeadlineMonth = 0,
                                        requirementDeadlineYear = 0;
                                    for (int l = 0; l < requirementDeadlineSubNodes.getLength(); l++)//new loop to run though all subNodes since deadline is from diff class
                                    {
                                        //have to set new nodeName and nodeContent when going into another subNode
                                        nodeContent = requirementDeadlineSubNodes.item(l).getTextContent();
                                        nodeName = requirementDeadlineSubNodes.item(l).getNodeName();
                                        switch (nodeName)
                                        {
                                            case "day":
                                                requirementDeadlineDay = Integer.parseInt(nodeContent);
                                                break;
                                            case "month":
                                                requirementDeadlineMonth = Integer.parseInt(nodeContent);
                                                break;
                                            case "year":
                                                requirementDeadlineYear = Integer.parseInt(nodeContent);
                                                break;
                                        }
                                    }//TODO add validation!
                                    requirementDeadline = new MyDate(requirementDeadlineDay, requirementDeadlineMonth,
                                        requirementDeadlineYear);
                                    break;
                                case "tasks":
                                    NodeList tasksSubNodes = requirementDataNode.getChildNodes();
                                    taskList = new TaskList();
                                    double taskEstimatedTime = 0,
                                        taskTimeSpent = 0;
                                    int taskID = 0,
                                        taskRequirementID = 0;
                                    String taskDescription = "",
                                        taskTitle = "",
                                        taskStatus = "";
                                    TeamMember taskResponsibleTeamMember = null;
                                    MyDate taskDeadline = null;
//                                    Requirement temp = null;
//                                    temp.setStatus(requirementStatus);
//                                    temp.setTimeSpent(timeSpent);

                                    for (int l = 0; l < tasksSubNodes.getLength(); l++)
                                    {
                                        Node taskNode = tasksSubNodes.item(l);
                                        if (!taskNode.getNodeName().equals("tasks"))//breaks without this because of subNode hierarchy
                                            continue;

                                        for (int m = 0; m < taskNode.getChildNodes().getLength(); m++)
                                        {
                                            Node taskDataNode = taskNode
                                                .getChildNodes().item(m);
                                            nodeContent = taskDataNode.getTextContent();
                                            nodeName = taskDataNode.getNodeName();

                                            switch (nodeName)
                                            {
                                                case "estimatedTime":
                                                    taskEstimatedTime = Double.parseDouble(nodeContent);
                                                    break;
                                                case "timeSpent":
                                                    taskTimeSpent = Double.parseDouble(nodeContent);
                                                    break;
                                                case "description":
                                                    taskDescription = nodeContent;
                                                    break;
                                                case "ID":
                                                    taskID = Integer.parseInt(nodeContent);
                                                    break;
                                                case "title":
                                                    taskTitle = nodeContent;
                                                    break;
                                                case "requirementID":
                                                    taskRequirementID = Integer.parseInt(nodeContent);
                                                    break;
                                                case "status":
                                                    taskStatus = nodeContent;
                                                    break;
                                                case "responsibleTeamMember":
                                                    NodeList taskTeamMemberSubNodes = taskDataNode.getChildNodes();
                                                    String taskMemberRole = "";
                                                    int taskMemberID = 0;
                                                    Name taskMemberName = null;

                                                    for (int n = 0; n < taskTeamMemberSubNodes.getLength(); n++)
                                                    {
                                                        Node taskTeamMemberNode = taskTeamMemberSubNodes.item(l);
                                                        nodeContent = taskTeamMemberNode.getTextContent();
                                                        nodeName = taskTeamMemberNode.getNodeName();
                                                        switch (nodeName)
                                                        {
                                                            case "role":
                                                                taskMemberRole = nodeContent;
                                                                break;
                                                            case "id":
                                                                taskMemberID = Integer.parseInt(nodeContent);
                                                                break;
                                                            case "name":
                                                                NodeList nameSubNodes = taskTeamMemberNode.getChildNodes();
                                                                String taskFirstName = "";
                                                                String taskLastName = "";
                                                                for (int t = 0; t < nameSubNodes.getLength(); t++)
                                                                {
                                                                    Node nameNode = nameSubNodes.item(t);
                                                                    nodeContent = nameNode.getTextContent();
                                                                    nodeName = nameNode.getNodeName();
                                                                    switch (nodeName)
                                                                    {
                                                                        case "firstName":
                                                                            taskFirstName = nodeContent;
                                                                            break;
                                                                        case "lastName":
                                                                            taskLastName = nodeContent;
                                                                            break;
                                                                    }
                                                                }
                                                                taskMemberName = new Name(taskFirstName, taskLastName);
                                                                break;
                                                            case "deadline":
                                                                NodeList taskDeadlineSubNodes = taskDataNode.getChildNodes();
                                                                int taskDeadlineDay = 0,
                                                                    taskDeadlineMonth = 0,
                                                                    taskDeadlineYear = 0;

                                                                for (int o = 0; o < taskDeadlineSubNodes.getLength(); o++)
                                                                {
                                                                    nodeContent = taskDeadlineSubNodes.item(o).getTextContent();
                                                                    nodeName = taskDeadlineSubNodes.item(o).getNodeName();
                                                                    switch (nodeName)
                                                                    {
                                                                        case "day":
                                                                            taskDeadlineDay = Integer.parseInt(nodeContent);
                                                                            break;
                                                                        case "month":
                                                                            taskDeadlineMonth = Integer.parseInt(nodeContent);
                                                                            break;
                                                                        case "year":
                                                                            taskDeadlineYear = Integer.parseInt(nodeContent);
                                                                            break;
                                                                    }
                                                                }//TODO add validation!
                                                                taskDeadline = new MyDate(taskDeadlineDay, taskDeadlineMonth,
                                                                    taskDeadlineYear);
                                                                break;
                                                        }
                                                    }
                                                    taskResponsibleTeamMember = new TeamMember(taskMemberName, taskMemberID);
                                                    taskResponsibleTeamMember.changeRole(taskMemberRole);
                                                    break;
                                            }
                                        }
                                        taskList.addTask(new Task(temp, taskID, taskTitle, taskDescription, taskEstimatedTime, taskResponsibleTeamMember, taskDeadline));
                                        taskList.getTaskByID(taskID).setStatus(taskStatus);
                                        taskList.getTaskByID(taskID).setTimeSpent(taskTimeSpent);
                                    }
                                    break;
                            }
                        }
                        requirementList.addRequirement(new Requirement(requirementID, userStory, type, estimatedTime, responsibleTeamMember, requirementDeadline));
                        requirementList.getByID(requirementID).setStatus(requirementStatus);
                        requirementList.getByID(requirementID).setTimeSpent(timeSpent);
                        requirementList.getByID(requirementID).setTaskList(taskList);
                    }
                    break;
            }
        }
        Project p = new Project(projectTitle, projectDeadline, customerID,
            projectDescription);
        p.setTeamMemberList(teamMemberList);
        p.setRequirementList(requirementList);
        return p;
    }